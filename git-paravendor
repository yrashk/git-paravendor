#! /usr/bin/env bash

working_directory_clean () {
if output=$(git status --porcelain) && [ -z "$output" ]; then
  return 0 
else
  return 1
 fi
}

check_if_initialized () {
  git show-ref --quiet --verify refs/heads/paravendor && return 0 
  branch=$(git rev-parse --abbrev-ref HEAD)
  remote=$(git config branch."$branch".remote)
  if [[ -z "$(git ls-remote "$remote" refs/heads/paravendor)" ]]; then
    return 1
  else
    git show-ref --quiet --verify "refs/remotes/$remote/paravendor" || return 1
    git checkout --quiet -b paravendor "$remote/paravendor"
    git checkout "$branch"
  fi
}

sync() {
  git fetch "$1" --prune --no-tags
  echo -n "Fetching & adding refs: "
  refs=""
  while read -r commit_hash ref_name; do
    [[ "$(git config -f "$top_level/config" --get ref."$1#$ref_name".commit)" == "$commit_hash" ]] && { echo -n "="; continue; }
    git rev-list --quiet "$commit_hash" 2>/dev/null || { echo -n "_" ; continue; }
    git config -f "$top_level/config" --add ref."$1#$ref_name".commit "$commit_hash"
    git config -f "$top_level/config" --add ref."$1".refs "$ref_name"
    if [[ "$refs" == *"$commit_hash"* ]]; then
      true
    else 
      refs="$refs -p $commit_hash"
    fi
    echo -n "."
  done <<< "$(git ls-remote --heads --tags "$1")"
  echo
  git add "$top_level/config"
  git commit --quiet -m "git paravendor: sync remote: $1"
  tree=$(git rev-parse --short 'HEAD^{tree}')
  merge=$(git commit-tree "$tree" $refs -p "$(git rev-parse --short HEAD)" -m "git paravendor: ref sync for $1")
  git update-ref refs/heads/paravendor "$merge"
}


case "$1" in
  init)
    working_directory_clean || { echo "git working directory is not clean, aborting"; exit 1; }
    current_head=$(git rev-parse --abbrev-ref HEAD)
    top_level=$(git rev-parse --show-toplevel)
    git checkout --quiet --orphan paravendor || { echo "can't create 'paravendor' branch, aborting"; exit 1;}
    git config -f "$top_level/config" --add paravendor.version 1
    git add "$top_level/config"
    git commit --quiet -m "git paravendor init"
    git checkout --quiet "$current_head"
    ;;
  add)
    check_if_initialized || { echo "not initialized, run 'git paravendor init' first" ; exit 1; }
    working_directory_clean || { echo "git working directory is not clean, aborting"; exit 1; }
    current_head=$(git rev-parse --abbrev-ref HEAD)
    top_level=$(git rev-parse --show-toplevel)
    echo "Adding $2"
    git checkout --quiet paravendor
    git config -f "$top_level/config" --get-urlmatch remote.added "$2" >/dev/null && {
       echo "$2 has been already added, aborting" 
       git checkout --quiet "$current_head"
       exit 1
    }
    git config -f "$top_level/config" --add remote."$2".added true
    git config -f "$top_level/config" --add paravendor.remote "$2"
    sync "$2"
    git checkout --quiet "$current_head"
    ;;
  sync)
    check_if_initialized || { echo "not initialized, run 'git paravendor init' first" ; exit 1; }
    working_directory_clean || { echo "git working directory is not clean, aborting"; exit 1; }
    if [ -z "$2" ]; then
      while read -r remote; do
        git paravendor sync "$remote"
      done <<< "$(git paravendor list)"
    else
        echo "Syncing $2"
        top_level=$(git rev-parse --show-toplevel)
        current_head=$(git rev-parse --abbrev-ref HEAD)
        git checkout --quiet paravendor
        sync "$2"
        git checkout --quiet "$current_head"
    fi
    ;;
  list)
    check_if_initialized || { echo "not initialized, run 'git paravendor init' first" ; exit 1; }
    git config --blob "$(git ls-tree --object-only paravendor config)" --get-all paravendor.remote
    ;;
  show-refs)
    check_if_initialized || { echo "not initialized, run 'git paravendor init' first" ; exit 1; }
    git config --blob "$(git ls-tree --object-only paravendor config)" --get-all ref."$2".refs
    ;;
  show-ref)
    check_if_initialized || { echo "not initialized, run 'git paravendor init' first" ; exit 1; }
    git config --blob "$(git ls-tree --object-only paravendor config)" --get ref."$2#refs/heads/$3".commit ||
    git config --blob "$(git ls-tree --object-only paravendor config)" --get ref."$2#refs/tags/$3^{}".commit ||
    git config --blob "$(git ls-tree --object-only paravendor config)" --get ref."$2#refs/tags/$3".commit ||
    git config --blob "$(git ls-tree --object-only paravendor config)" --get ref."$2#$3".commit 
    ;;
  *)
    echo "Unknown command"
    exit 1 
    ;;
esac
